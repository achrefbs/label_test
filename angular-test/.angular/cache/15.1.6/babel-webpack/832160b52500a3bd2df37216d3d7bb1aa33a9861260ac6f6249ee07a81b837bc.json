{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction LabelListComponent_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function LabelListComponent_button_6_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const label_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onLabelSelect(label_r1));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const label_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"background-color\", label_r1.color)(\"color\", \"white\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(label_r1.label);\n  }\n}\nexport class LabelListComponent {\n  constructor() {\n    this.labelList = [];\n    this.labelListInput = '';\n    this.onLabelSelected = new EventEmitter();\n  }\n  getRandomColor() {\n    const Hexletters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += Hexletters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n  addLabel() {\n    if (this.labelListInput) {\n      let listofLabels = this.labelListInput.split(' ');\n      for (let i = 0; i < listofLabels.length; i++) {\n        this.labelList.push({\n          label: listofLabels[i],\n          color: this.getRandomColor()\n        });\n      }\n      this.labelListInput = '';\n    }\n  }\n  onLabelSelect(label) {\n    this.onLabelSelected.emit(label);\n  }\n}\nLabelListComponent.ɵfac = function LabelListComponent_Factory(t) {\n  return new (t || LabelListComponent)();\n};\nLabelListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LabelListComponent,\n  selectors: [[\"app-label-list\"]],\n  inputs: {\n    labelList: \"labelList\"\n  },\n  outputs: {\n    onLabelSelected: \"onLabelSelected\"\n  },\n  decls: 7,\n  vars: 2,\n  consts: [[1, \"labels-row\"], [1, \"input-box\"], [\"type\", \"text\", \"id\", \"labelList\", \"maxlength\", \"100\", 2, \"width\", \"300px\", 3, \"ngModel\", \"ngModelChange\"], [1, \"AddLabel-Btn\", 3, \"click\"], [1, \"Labels\"], [\"class\", \"Label\", 3, \"background-color\", \"color\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"Label\", 3, \"click\"]],\n  template: function LabelListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function LabelListComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.labelListInput = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function LabelListComponent_Template_button_click_3_listener() {\n        return ctx.addLabel();\n      });\n      i0.ɵɵtext(4, \"Add Label\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵtemplate(6, LabelListComponent_button_6_Template, 2, 5, \"button\", 5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.labelListInput);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.labelList);\n    }\n  },\n  dependencies: [i1.NgForOf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.MaxLengthValidator, i2.NgModel],\n  styles: [\"button[_ngcontent-%COMP%] {\\r\\n    background-color: transparent;\\r\\n    border-color: black;\\r\\n}\\r\\n.labels-row[_ngcontent-%COMP%] {\\r\\n    display: flex-start;\\r\\n    justify-content: start;\\r\\n}\\r\\n.input-box[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: start;\\r\\n    flex-wrap: nowrap;\\r\\n    align-items: flex-start;\\r\\n    width: 550px;\\r\\n}\\r\\n.AddLabel-Btn[_ngcontent-%COMP%] {\\r\\n    white-space: nowrap;\\r\\n    min-width: auto;\\r\\n}\\r\\n.Labels[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n    width: 100%;\\r\\n}\\r\\n.Label[_ngcontent-%COMP%] {\\r\\n    cursor: pointer;\\r\\n    font-size:small;\\r\\n    padding: 3px 20px 3px 10px;\\r\\n    border-radius: 5px;\\r\\n    margin: auto 5px;\\r\\n    white-space: wrap;\\r\\n    margin-bottom: 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbGFiZWwtbGlzdC9sYWJlbC1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSw2QkFBNkI7SUFDN0IsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsc0JBQXNCO0FBQzFCO0FBQ0E7SUFDSSxhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLGlCQUFpQjtJQUNqQix1QkFBdUI7SUFDdkIsWUFBWTtBQUNoQjtBQUNBO0lBQ0ksbUJBQW1CO0lBQ25CLGVBQWU7QUFDbkI7QUFDQTtJQUNJLGFBQWE7SUFDYixlQUFlO0lBQ2YsV0FBVztBQUNmO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZUFBZTtJQUNmLDBCQUEwQjtJQUMxQixrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGlCQUFpQjtJQUNqQixtQkFBbUI7QUFDdkIiLCJzb3VyY2VzQ29udGVudCI6WyJidXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItY29sb3I6IGJsYWNrO1xyXG59XHJcbi5sYWJlbHMtcm93IHtcclxuICAgIGRpc3BsYXk6IGZsZXgtc3RhcnQ7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHN0YXJ0O1xyXG59XHJcbi5pbnB1dC1ib3gge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XHJcbiAgICBmbGV4LXdyYXA6IG5vd3JhcDtcclxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4gICAgd2lkdGg6IDU1MHB4O1xyXG59XHJcbi5BZGRMYWJlbC1CdG4ge1xyXG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICAgIG1pbi13aWR0aDogYXV0bztcclxufVxyXG4uTGFiZWxzIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG4uTGFiZWwge1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOnNtYWxsO1xyXG4gICAgcGFkZGluZzogM3B4IDIwcHggM3B4IDEwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgICBtYXJnaW46IGF1dG8gNXB4O1xyXG4gICAgd2hpdGUtc3BhY2U6IHdyYXA7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAA2BA,YAAY,QAAgB,eAAe;;;;;;;ICMlEC,iCAEC;IAFuCA;MAAA;MAAA;MAAA;MAAA,OAASA,6CAAoB;IAAA,EAAC;IAErEA,YAAiB;IAAAA,iBAAS;;;;IAF4CA,kDAAsC;IAE5GA,eAAiB;IAAjBA,oCAAiB;;;ADDtB,OAAM,MAAOC,kBAAkB;EAL/BC;IAMW,cAAS,GAAmC,EAAE;IACvD,mBAAc,GAAG,EAAE;IACT,oBAAe,GAAG,IAAIH,YAAY,EAAgC;;EAE5EI,cAAc;IACZ,MAAMC,UAAU,GAAG,kBAAkB;IACrC,IAAIC,KAAK,GAAG,GAAG;IACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BD,KAAK,IAAID,UAAU,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;;IAErD,OAAOJ,KAAK;EACd;EAEAK,QAAQ;IACN,IAAI,IAAI,CAACC,cAAc,EAAE;MACvB,IAAIC,YAAY,GAAG,IAAI,CAACD,cAAc,CAACE,KAAK,CAAC,GAAG,CAAC;MACjD,KAAI,IAAIP,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACM,YAAY,CAACE,MAAM,EAAER,CAAC,EAAE,EAAC;QACxC,IAAI,CAACS,SAAS,CAACC,IAAI,CAAC;UAACC,KAAK,EAAEL,YAAY,CAACN,CAAC,CAAC;UAAED,KAAK,EAAE,IAAI,CAACF,cAAc;QAAE,CAAC,CAAC;;MAE3E,IAAI,CAACQ,cAAc,GAAG,EAAE;;EAE5B;EAEAO,aAAa,CAACD,KAAmC;IAC/C,IAAI,CAACE,eAAe,CAACC,IAAI,CAACH,KAAK,CAAC;EAClC;;AA1BWhB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAoB;EAAAC;IAAAP;EAAA;EAAAQ;IAAAJ;EAAA;EAAAK;EAAAC;EAAAC;EAAAC;IAAA;MCP/B3B,8BAAyB;MAEaA;QAAA;MAAA,EAA4B;MAA9DA,iBAAqG;MACrGA,iCAAkD;MAA1CA;QAAA,OAAS4B,cAAU;MAAA,EAAC;MAAsB5B,yBAAS;MAAAA,iBAAS;MAExEA,8BAAoB;MAChBA,yEAE2B;MAC/BA,iBAAM;;;MAPgCA,eAA4B;MAA5BA,4CAA4B;MAIpCA,eAAY;MAAZA,uCAAY","names":["EventEmitter","i0","LabelListComponent","constructor","getRandomColor","Hexletters","color","i","Math","floor","random","addLabel","labelListInput","listofLabels","split","length","labelList","push","label","onLabelSelect","onLabelSelected","emit","selectors","inputs","outputs","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\achre\\OneDrive\\Desktop\\test\\angular-test\\src\\app\\label-list\\label-list.component.ts","C:\\Users\\achre\\OneDrive\\Desktop\\test\\angular-test\\src\\app\\label-list\\label-list.component.html"],"sourcesContent":["import { Component, Input, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-label-list',\n  templateUrl: './label-list.component.html',\n  styleUrls: ['./label-list.component.css']\n})\nexport class LabelListComponent {\n  @Input() labelList: {label:string, color:string}[] = [];\n  labelListInput = '';\n  @Output() onLabelSelected = new EventEmitter<{label:string, color:string}>();\n  \n  getRandomColor() {\n    const Hexletters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += Hexletters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  }\n\n  addLabel() {\n    if (this.labelListInput) {\n      let listofLabels = this.labelListInput.split(' ');\n      for(let i=0; i<listofLabels.length; i++){\n      this.labelList.push({label: listofLabels[i], color: this.getRandomColor()});\n      }\n      this.labelListInput = '';\n    }\n  }\n\n  onLabelSelect(label: {label:string, color:string}) {\n    this.onLabelSelected.emit(label);\n  }\n}","<div class ='labels-row'>\n    <div class=\"input-box\">\n    <input type=\"text\" id=\"labelList\" [(ngModel)]=\"labelListInput\" maxlength=\"100\" style=\"width: 300px;\">\n    <button (click)=\"addLabel()\" class=\"AddLabel-Btn\">Add Label</button>\n</div>\n<div class=\"Labels\">\n    <button *ngFor=\"let label of labelList\" (click)=\"onLabelSelect(label)\" [style.background-color]=\"label.color\" [style.color]=\"'white'\"\nclass=\"Label\"    \n    >{{ label.label }}</button>\n</div>\n</div>  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}